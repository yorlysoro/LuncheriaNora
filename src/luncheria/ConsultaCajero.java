/*
 * Copyright 2019 yorlysoro <yorlysoro@gmail.com>.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package luncheria;

import java.awt.Color;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 * Ventana ConsultaCajero
 * Esta ventana se encarga de mostrar un listado de todos los usuarios que esten registrados en la base de datos,
 * el usuario podra seleccionar uno de ellos y pulsar en el boton aceptar para que luego esta informacion sea 
 * pasado a la ventana padre Cajeros, utilizando el metodo que se encuentra en la misma llamado setCod que se
 * encargar de recibir como parametro la cedula del usuario.
 * @author giovanni
 */
public class ConsultaCajero extends javax.swing.JDialog {
    private basedatos bd;
    private cajeros caja;
    private DefaultTableModel tabla ; 
    private String nomb_user;
    private String cod_user;

    /**1
     * Creates new form ConsultaServicio
     */
     /**
     * Constructor de la Ventana ConsultaCajero
     * Recibe como parametros el padre, el modal, la base de datos, la clase cajero, el nombre del usuario, y el codigo del usuario
     * @param parent
     * @param modal
     * @param bd
     * @param caja
     * @param nomb_user
     * @param cod_user
     * @throws SQLException 
     */
    public ConsultaCajero(java.awt.Frame parent, boolean modal, basedatos bd, cajeros caja, String nomb_user, String cod_user) throws SQLException {
         super(parent, modal);
        BitacoraVentanas.LOG_RAIZ.log(Level.INFO, "Iniciando ventana de consulta de cajeros");
        this.bd = bd;
        this.caja = caja;
        
        this.cod_user = cod_user;
        this.nomb_user = nomb_user;
        
        
        initComponents();
        this.setLocationRelativeTo(null);
        this.tabla =(DefaultTableModel) tablaCajeros.getModel();
        this.comboSeleccione.setVisible(false);
        this.lblMostrar.setVisible(false);
        if(!this.cod_user.equalsIgnoreCase("1")){
            this.Cargar_Tabla();
        } else{
            this.comboSeleccione.setVisible(true);
            this.lblMostrar.setVisible(true);
            this.cargarSegunCombo(cod_user);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaCajeros = new javax.swing.JTable();
        JBtn_aceptar = new javax.swing.JButton();
        JBtn_salir = new javax.swing.JButton();
        comboSeleccione = new javax.swing.JComboBox<>();
        lblMostrar = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);

        jPanel1.setBackground(new java.awt.Color(51, 153, 255));

        tablaCajeros.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        tablaCajeros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cedula", "Nombre", "Apellido", "Nombre de Usuario", "Nivel"
            }
        ));
        tablaCajeros.setGridColor(new java.awt.Color(51, 51, 255));
        tablaCajeros.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaCajerosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaCajeros);

        JBtn_aceptar.setBackground(new java.awt.Color(51, 102, 255));
        JBtn_aceptar.setFont(new java.awt.Font("MOAM91", 1, 14)); // NOI18N
        JBtn_aceptar.setForeground(new java.awt.Color(255, 255, 255));
        JBtn_aceptar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/274-checkmark2hover.png"))); // NOI18N
        JBtn_aceptar.setText("ACEPTAR");
        JBtn_aceptar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), java.awt.Color.white, java.awt.Color.white));
        JBtn_aceptar.setEnabled(false);
        JBtn_aceptar.setFocusPainted(false);
        JBtn_aceptar.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/274-checkmark2.png"))); // NOI18N
        JBtn_aceptar.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/274-checkmark2.png"))); // NOI18N
        JBtn_aceptar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                JBtn_aceptarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                JBtn_aceptarMouseExited(evt);
            }
        });
        JBtn_aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtn_aceptarActionPerformed(evt);
            }
        });

        JBtn_salir.setBackground(new java.awt.Color(51, 102, 255));
        JBtn_salir.setFont(new java.awt.Font("MOAM91", 1, 14)); // NOI18N
        JBtn_salir.setForeground(new java.awt.Color(255, 255, 255));
        JBtn_salir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/salida.png"))); // NOI18N
        JBtn_salir.setText("     SALIR");
        JBtn_salir.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 0, 0), new java.awt.Color(0, 0, 0), java.awt.Color.white, java.awt.Color.white));
        JBtn_salir.setFocusPainted(false);
        JBtn_salir.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/277-exithover.png"))); // NOI18N
        JBtn_salir.setRolloverSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/277-exithover.png"))); // NOI18N
        JBtn_salir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                JBtn_salirMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                JBtn_salirMouseExited(evt);
            }
        });
        JBtn_salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtn_salirActionPerformed(evt);
            }
        });

        comboSeleccione.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TODOS", "ACTIVOS", "INACTIVOS" }));
        comboSeleccione.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboSeleccioneItemStateChanged(evt);
            }
        });

        lblMostrar.setText("Mostrar:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(JBtn_aceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(80, 80, 80)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(comboSeleccione, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(lblMostrar)
                                .addGap(57, 57, 57)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(JBtn_salir, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(JBtn_aceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(JBtn_salir, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblMostrar)
                        .addGap(4, 4, 4)
                        .addComponent(comboSeleccione, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tablaCajerosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaCajerosMouseClicked
        // TODO add your handling code heres
        this.JBtn_aceptar.setEnabled(true);

    }//GEN-LAST:event_tablaCajerosMouseClicked

    private void JBtn_aceptarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JBtn_aceptarMouseEntered
        JBtn_aceptar.setBackground( new Color(255,255,255));
        JBtn_aceptar.setForeground(new Color(0,0,0));
    }//GEN-LAST:event_JBtn_aceptarMouseEntered

    private void JBtn_aceptarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JBtn_aceptarMouseExited
        JBtn_aceptar.setBackground( new Color(51,102,255));
        JBtn_aceptar.setForeground(new Color(255,255,255));
    }//GEN-LAST:event_JBtn_aceptarMouseExited

    private void JBtn_aceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBtn_aceptarActionPerformed
        this.aceptar();
    }//GEN-LAST:event_JBtn_aceptarActionPerformed

    private void JBtn_salirMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JBtn_salirMouseEntered
        // TODO add your handling code here:
        JBtn_salir.setBackground( new Color(255,255,255));
        JBtn_salir.setForeground(new Color(0,0,0));
    }//GEN-LAST:event_JBtn_salirMouseEntered

    private void JBtn_salirMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JBtn_salirMouseExited
        // TODO add your handling code here:
        JBtn_salir.setBackground( new Color(51,102,255));
        JBtn_salir.setForeground(new Color(255,255,255));
    }//GEN-LAST:event_JBtn_salirMouseExited

    private void JBtn_salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBtn_salirActionPerformed
        BitacoraVentanas.LOG_RAIZ.log(Level.INFO, "Saliendo de la ventana Consultar Cajeros");

        this.dispose();
    }//GEN-LAST:event_JBtn_salirActionPerformed

    private void comboSeleccioneItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboSeleccioneItemStateChanged
        // TODO add your handling code here:
        this.cargarSegunCombo(cod_user);
    }//GEN-LAST:event_comboSeleccioneItemStateChanged

    /**
     * @param args the command line arguments
     */
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JBtn_aceptar;
    private javax.swing.JButton JBtn_salir;
    private javax.swing.JComboBox<String> comboSeleccione;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblMostrar;
    private javax.swing.JTable tablaCajeros;
    // End of variables declaration//GEN-END:variables
 /**
     * Metodo Cargar_Tabla
     * Se encarga de cargar la tabla con la cedula, nombre, apellido, nombre de usuario y tipo de usuario 
     * que esten registrados en la base de datos.
     * @throws SQLException 
     */
    private void Cargar_Tabla() throws SQLException {
         try{
            this.bd.Conectar();
            this.bd.setResult("SELECT empleados.cedula, empleados.nombres, empleados.apellidos, usuarios.nombre_usuario, tipos_usuarios.nombre FROM empleados, usuarios, tipos_usuarios WHERE empleados.cedula = usuarios.cedula_empleado and usuarios.cod_nivel = tipos_usuarios.cod and empleados.status = '1' and usuarios.status = '1'");
            String Datos[] = new String[5];
            ResultSet result = this.bd.getResult();
            while(result.next()){
                Datos[0] = (""+result.getString(1));
                Datos[1] = (""+result.getString(2));
                Datos[2] = (""+result.getString(3));
                Datos[3] = (""+result.getString(4));
                Datos[4] = (""+result.getString(5));
                this.tabla.addRow(Datos);
            }
            ////this.bd.Close();
        }catch (SQLException ex) {
                BitacoraVentanas.LOG_RAIZ.log(Level.CONFIG, "Error al cargar la tabla desde la base de datos:{0}", ex.getMessage());

            }
       
    }
 /**
     * Metodo aceptar
     * Pasa la cedula del empleado a la ventana padre obtenido de la tabla 
     * al metodo setCod.
     */
    private void aceptar() {
           if(this.tablaCajeros.getSelectedRow() >= 0){
            this.caja.setCod(String.valueOf(this.tabla.getValueAt(this.tablaCajeros.getSelectedRow(), 0)));
            this.dispose();
        }else{
            JOptionPane.showMessageDialog(this, "Seleccione una fila!!", "Error", JOptionPane.ERROR_MESSAGE);
             BitacoraVentanas.LOG_RAIZ.log(Level.WARNING, "Error al intenta enviar datos vacios a una ventana padre" );

        }    }
 /**
     * Metodo cargarSegunCombo
     * Altera la informacion de la tabla segun como sea seleccionado uno de sus items: TODOS, ACTIVOS e INACTIVOS.
     * Trabaja en conjunto con el combobox mostrar.
     * @param cod_user 
     */
    private void cargarSegunCombo(String cod_user) {
        
        if(cod_user.equalsIgnoreCase("1")){
            if(String.valueOf(this.comboSeleccione.getSelectedItem()).equalsIgnoreCase("TODOS")){
                this.borrarTabla();
                try{
                this.bd.Conectar();
                this.bd.setResult("SELECT empleados.cedula, empleados.nombres, empleados.apellidos, usuarios.nombre_usuario, tipos_usuarios.nombre FROM empleados, usuarios, tipos_usuarios WHERE empleados.cedula = usuarios.cedula_empleado and usuarios.cod_nivel = tipos_usuarios.cod");
                String Datos[] = new String[5];
                ResultSet result = this.bd.getResult();
                while(result.next()){
                    Datos[0] = (""+result.getString(1));
                    Datos[1] = (""+result.getString(2));
                    Datos[2] = (""+result.getString(3));
                    Datos[3] = (""+result.getString(4));
                    Datos[4] = (""+result.getString(5));
                    this.tabla.addRow(Datos);
                }
                ////this.bd.Close();
            }catch (SQLException ex) {
                BitacoraVentanas.LOG_RAIZ.log(Level.CONFIG, "Error al cargar la tabla desde la base de datos:{0}", ex.getMessage());
                }
            } else if(String.valueOf(this.comboSeleccione.getSelectedItem()).equalsIgnoreCase("ACTIVOS")){
                this.borrarTabla();
                try{
                this.bd.Conectar();
                this.bd.setResult("SELECT empleados.cedula, empleados.nombres, empleados.apellidos, usuarios.nombre_usuario, tipos_usuarios.nombre FROM empleados, usuarios, tipos_usuarios WHERE empleados.cedula = usuarios.cedula_empleado and usuarios.cod_nivel = tipos_usuarios.cod and empleados.status = '1' and usuarios.status = '1'");
                String Datos[] = new String[5];
                ResultSet result = this.bd.getResult();
                while(result.next()){
                    Datos[0] = (""+result.getString(1));
                    Datos[1] = (""+result.getString(2));
                    Datos[2] = (""+result.getString(3));
                    Datos[3] = (""+result.getString(4));
                    Datos[4] = (""+result.getString(5));
                    this.tabla.addRow(Datos);
                }
                ////this.bd.Close();
            }catch (SQLException ex) {
                BitacoraVentanas.LOG_RAIZ.log(Level.CONFIG, "Error al cargar la tabla desde la base de datos:{0}", ex.getMessage());
                }
            }  else if(String.valueOf(this.comboSeleccione.getSelectedItem()).equalsIgnoreCase("INACTIVOS")){
                this.borrarTabla();
                try{
                this.bd.Conectar();
                this.bd.setResult("SELECT empleados.cedula, empleados.nombres, empleados.apellidos, usuarios.nombre_usuario, tipos_usuarios.nombre FROM empleados, usuarios, tipos_usuarios WHERE empleados.cedula = usuarios.cedula_empleado and usuarios.cod_nivel = tipos_usuarios.cod and empleados.status = '0' and usuarios.status = '0'");
                String Datos[] = new String[5];
                ResultSet result = this.bd.getResult();
                while(result.next()){
                    Datos[0] = (""+result.getString(1));
                    Datos[1] = (""+result.getString(2));
                    Datos[2] = (""+result.getString(3));
                    Datos[3] = (""+result.getString(4));
                    Datos[4] = (""+result.getString(5));
                    this.tabla.addRow(Datos);
                }
                ////this.bd.Close();
            }catch (SQLException ex) {
                BitacoraVentanas.LOG_RAIZ.log(Level.CONFIG, "Error al cargar la tabla desde la base de datos:{0}", ex.getMessage());
                }
            }
        }
    }
/**
     * Metodo BorrarTabla
     * Se encarga de vaciar la tabla.
     */
    private void borrarTabla() {
        for(int i = 0; i < this.tabla.getRowCount(); i++)
            this.tabla.removeRow(i);
    }
}
